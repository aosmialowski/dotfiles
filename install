#!/usr/bin/env bash

if [[ ! $(uname) = "Darwin" ]]; then
  error 'unsupported os' # TODO add error message
fi

DOTFILES_DIR=$HOME/.dotfiles
DOTFILES_REPO=https://github.com/aosmialowski/dotfiles.git

sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2> /dev/null &

ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_BLUE=$ESC_SEQ"34;01m"

function info () {
  echo -e "$COL_BLUE""RUNNING: $1$COL_RESET"
}
function success () {
  echo -e "$COL_GREEN""COMPLETED: $1$COL_RESET\n"
}

function error () {
  echo -e "$COL_RED""FAILED: $1$COL_RESET\n"
  exit 1
}

result () {
  if [[ "$1" -eq 0 ]]; then
      success "$2"
  else
      error "$2"
  fi

  return "$1"
}

link () {
  args=("$@")

  file="${args[0]/\~\/}"
  source="$PWD/${args[1]}"
  force="${args[2]}"
  backup="$HOME/backup/$(date +%Y%m%d%H%M%S)"

  if [[ $force = true ]]; then
    if [[ -L $HOME/$file ]]; then
      echo -e "Removing existing link: $file"
      rm $HOME/$file
    fi
  fi

  if [[ -f $HOME/$file ]]; then
    if [[ ! -L $HOME/$file ]]; then
      echo -e "Backing up file: $file"
      mkdir -p $backup/$(dirname $file)
      mv $HOME/$file $backup/$file
    fi
  fi

  if [[ ! -L $HOME/$file ]]; then
    echo -e "Creating link to $file"
    mkdir -p $HOME/$(dirname $file)
    ln -si $source $HOME/$file
  fi
}

task='Installing Xcode command line tools'
info "$task"
if [[ ! $(xcode-select --print-path) ]]; then
  xcode-select --install

  until [[ $(xcode-select --print-path) ]]; do
    sleep 5
  done
fi
result $? "$task"

task='Configuring dotfiles repository'
info "$task"
if [[ ! -d $DOTFILES_DIR ]]; then
  $(which git) clone $DOTFILES_REPO $DOTFILES_DIR
else
  cd $DOTFILES_DIR && $(which git) pull
fi
result $? "$task"

cd $DOTFILES_DIR

task='Creating required directories'
info "$task"
[ -d $HOME/bin ] || mkdir $HOME/bin
[ -d $HOME/.mackup ] || mkdir $HOME/.mackup
[ -d $HOME/.zsh ] || mkdir $HOME/.zsh
[ -d $HOME/Workspace ] || mkdir $HOME/Workspace
result $? "$task"

task="Applying required files permission"
info "$task"
chmod +x $DOTFILES_DIR/bin/dotfiles
chmod +x $DOTFILES_DIR/macos/*.sh
result $? "$task"

task='Installing dotfiles'
info "$task"
link '~/.curlrc' 'curl/curlrc' true
link '~/.editorconfig' 'editorconfig/editorconfig' true
link '~/.gitattributes' 'git/gitattributes' true
link '~/.gitconfig' 'git/gitconfig' true
link '~/.gitignore' 'git/gitignore' true
link '~/.mackup.cfg' 'mackup/mackup.cfg' true
link '~/.mackup/jetbrains-tools.cfg' 'mackup/jetbrains-tools.cfg' true
link '~/.vimrc' 'vim/vimrc' true
link '~/.wgetrc' 'wget/wgetrc' true
link '~/.zsh/options.zsh' 'zsh/options.zsh' true
link '~/.zsh/plugins.txt' 'zsh/plugins.txt' true
link '~/.zshrc' 'zsh/zshrc' true
link '~/bin/dotfiles' 'bin/dotfiles' true
result $? "$task"

if [[ ! $(which brew) ]]; then
  task='Installing Homebrew'
  info "$task"
  yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  result $? "$task"
else
  task='Updating Homebrew'
  info "$task"
  $(which brew) update
  result $? "$task"

  task='Upgrading Homebrew'
  info "$task"
  $(which brew) upgrade
  result $? "$task"
fi

task='Installing Homebrew packages'
info "$task"
$(which brew) bundle --file=$DOTFILES_DIR/homebrew/Brewfile --no-lock install
result $? "$task"

task='Cleaning up Homebrew packages'
info "$task"
$(which brew) cleanup
result $? "$task"

task='Installing zsh plugins'
info "$task"
$(which antibody) bundle < $HOME/.zsh/plugins.txt > $HOME/.zsh/plugins.zsh
result $? "$task"

task='Updating zsh plugins'
info "$task"
$(which antibody) update
result $? "$task"

task='Restoring application preferences'
info "$task"
$(which mackup) --force restore
result $? "$task"

task='Configuring macos default settings'
info "$task"
$HOME/.dotfiles/macos/defaults.sh
result $? "$task"
