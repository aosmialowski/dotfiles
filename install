#!/usr/bin/env bash

if [[ ! $(uname) = "Darwin" ]]; then
  error 'unsupported os' # TODO add error message
fi

DOTFILES_DIR=$HOME/.dotfiles
DOTFILES_REPO=https://github.com/aosmialowski/dotfiles.git

sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2> /dev/null &

link () {
  args=("$@")

  file="${args[0]/\~\/}"
  source="$PWD/${args[1]}"
  force="${args[2]}"
  backup="$HOME/backup/$(date +%Y%m%d%H%M%S)"

  if [[ $force = true ]]; then
    if [[ -L $HOME/$file ]]; then
      echo "removing existing link: $file"
      rm $HOME/$file
    fi
  fi

  if [[ -f $HOME/$file ]]; then
    if [[ ! -L $HOME/$file ]]; then
      echo "backing up file: $file"
      mkdir -p $backup/$(dirname $file)
      mv $HOME/$file $backup/$file
    fi
  fi

  if [[ ! -L $HOME/$file ]]; then
    echo "creating link to $file"
    mkdir -p $HOME/$(dirname $file)
    ln -si $source $HOME/$file
  fi
}

echo 'installing xcode command line tools'
if [[ ! $(xcode-select --print-path) ]]; then
  xcode-select --install

  until [[ $(xcode-select --print-path) ]]; do
    echo 'waiting for xcode command line tools installation to complete'
    sleep 5
  done
fi
echo 'installed xcode command line tools'

echo 'configuring dotfiles repository'
if [[ ! -d $DOTFILES_DIR ]]; then
  $(which git) clone $DOTFILES_REPO $DOTFILES_DIR --quiet
else
  cd $DOTFILES_DIR && $(which git) pull --quiet
fi
echo 'configured dotfiles repository'

cd $DOTFILES_DIR

echo 'creating required directories'
[ -d $HOME/bin ] || mkdir $HOME/bin
[ -d $HOME/.mackup ] || mkdir $HOME/.mackup
[ -d $HOME/.zsh ] || mkdir $HOME/.zsh
[ -d $HOME/Workspace ] || mkdir $HOME/Workspace
echo 'created required directories'

echo 'setting up files permission'
chmod +x $DOTFILES_DIR/bin/defaults
chmod +x $DOTFILES_DIR/macos/*.sh
echo 'set up files permission'

echo 'installing dotfiles'
link '~/.curlrc' 'curl/curlrc' true
link '~/.editorconfig' 'editorconfig/editorconfig' true
link '~/.gitattributes' 'git/gitattributes' true
link '~/.gitconfig' 'git/gitconfig' true
link '~/.gitignore' 'git/gitignore' true
link '~/.mackup.cfg' 'mackup/mackup.cfg' true
link '~/.mackup/jetbrains-tools.cfg' 'mackup/jetbrains-tools.cfg' true
link '~/.vimrc' 'vim/vimrc' true
link '~/.wgetrc' 'wget/wgetrc' true
link '~/.zsh/options.zsh' 'zsh/options.zsh' true
link '~/.zsh/plugins.txt' 'zsh/plugins.txt' true
link '~/.zshrc' 'zsh/zshrc' true
link '~/bin/dotfiles' 'bin/dotfiles' true
echo 'installed dotfiles'

if [[ ! $(which brew) ]]; then
  echo 'installing homebrew'
  yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  echo 'installed homebrew'
else
  echo 'updating homebrew'
  $(which brew) update
  echo 'updated homebrew'

  echo 'upgrading homebrew'
  $(which brew) upgrade
  echo 'upgraded homebrew'
fi

echo 'installing homebrew packages'
$(which brew) bundle --file=$DOTFILES/homebrew/Brewfile --quiet --no-lock install
echo 'installed homebrew packages'

echo 'cleaning up homebrew packages'
$(which brew) cleanup
echo 'cleaned up homebrew packages'

echo 'installing zsh plugins'
$(which antibody) bundle < $HOME/.zsh/plugins.txt > $HOME/.zsh/plugins.zsh
echo 'installed zsh plugins'

echo 'updating zsh plugins'
$(which antibody) update
echo 'updated zsh plugins'

echo 'restoring application preferences'
$(which mackup) --force restore
echo 'restored application preferences'

echo 'configuring macos default settings'
$HOME/.dotfiles/macos/defaults.sh
echo 'configured macos default settings'
